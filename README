This provides an old style jukebox type interface to sonos. Tracks are selected using a letter and number comibination. It is fully self contained and only needs python to run.

It is primarily designed to run on a raspberry pi and interface with a wallbox where you can make selections. Instructions on how to do this are at http://wallbox.weebly.com/


To start it, all you need to do is run server.py from the installation directory. This starts a webserver listening on port 8000
The data about the sonos system and the selections are held in an sqllit database called jukebox.db

There are 2 pages used - admin.py which is used to update the database and sonos.py which starts the selected track playing on sonos

The first time you run this, you should open a webpage at http://localhost:8000/admin.py which sets stuff up and can be used to change selections

admin.py

This creates an sqllite database (if it does not exist) that will hold the information needed
You should change the ip address to match your sonos system and then click update
You can also enter your spotify username here if you have a spotify account

You can use the search box at the top to search for a track in your libraru (it only searches track titles) and assign it to a selection. This only searches your sonos library
If you have a spotify account you can use the 2nd search box to search for a track in spotify and assign it

You can also manually update selections to assign tracks from other sources (though this is a bit manual)

To find the details for these kind of selections, you need to capture the traffic between a sonos controller and the sonos system.
On windows this can be done using wireshark

Start the sonos controller on windows and start wireshark. In wireshark, create a filter like this (setting the ip address to be the ip address of your sonos system)

 tcp.flags.push == 1 && ip.dst == 192.168.1.19

then search for and start playing the radio stream or spotify track

You will see a load of requests being captured in wireshark. 

For radio stations/streams the one you want has this in it

SOAPACTION: "urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI"

select this and right click on it, select copy->bytes->printable text only and paste this into a text editor - it will be something like


XS'hE1\@*x<5P@)POST /MediaRenderer/AVTransport/Control HTTP/1.1
CONNECTION: close
ACCEPT-ENCODING: gzip
HOST: 192.168.1.19:1400
USER-AGENT: Linux UPnP/1.0 Sonos/22.0-64240 (WDCR:Microsoft Windows NT 6.1.7601 Service Pack 1)
CONTENT-LENGTH: 1021
CONTENT-TYPE: text/xml; charset="utf-8"
SOAPACTION: "urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI"

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:SetAVTransportURI xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><CurrentURI>x-sonosapi-stream:s44491?sid=254&amp;flags=32</CurrentURI><CurrentURIMetaData>&lt;DIDL-Lite xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:upnp=&quot;urn:schemas-upnp-org:metadata-1-0/upnp/&quot; xmlns:r=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot; xmlns=&quot;urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/&quot;&gt;&lt;item id=&quot;R:0/0/0&quot; parentID=&quot;R:0/0&quot; restricted=&quot;true&quot;&gt;&lt;dc:title&gt;BBC Radio 6 Music&lt;/dc:title&gt;&lt;upnp:class&gt;object.item.audioItem.audioBroadcast&lt;/upnp:class&gt;&lt;desc id=&quot;cdudn&quot; nameSpace=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot;&gt;SA_RINCON65031_&lt;/desc&gt;&lt;/item&gt;&lt;/DIDL-Lite&gt;</CurrentURIMetaData></u:SetAVTransportURI></s:Body></s:Envelope>

The bits you need out of this are CurrentURI and CurrentURIMetaData. From the example above these are

<CurrentURI>x-sonosapi-stream:s44491?sid=254&amp;flags=32</CurrentURI>
<CurrentURIMetaData>&lt;DIDL-Lite xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:upnp=&quot;urn:schemas-upnp-org:metadata-1-0/upnp/&quot; xmlns:r=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot; xmlns=&quot;urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/&quot;&gt;&lt;item id=&quot;R:0/0/0&quot; parentID=&quot;R:0/0&quot; restricted=&quot;true&quot;&gt;&lt;dc:title&gt;BBC Radio 6 Music&lt;/dc:title&gt;&lt;upnp:class&gt;object.item.audioItem.audioBroadcast&lt;/upnp:class&gt;&lt;desc id=&quot;cdudn&quot; nameSpace=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot;&gt;SA_RINCON65031_&lt;/desc&gt;&lt;/item&gt;&lt;/DIDL-Lite&gt;</CurrentURIMetaData>

Paste the text from between the CurrentURI tags into the URI box and the text from between CurrentURIMetaData tags into the metadata box and select stream and click update

For spotify tracks the one you want has this in it

SOAPACTION: "urn:schemas-upnp-org:service:AVTransport:1#AddURIToQueue"

as for radio stations, select this and right click on it, select copy->bytes->printable text only and paste this into a text editor - it will be something like

XS'hEQr]@*xi"G$P@)POST /MediaRenderer/AVTransport/Control HTTP/1.1
CONNECTION: close
ACCEPT-ENCODING: gzip
HOST: 192.168.1.19:1400
USER-AGENT: Linux UPnP/1.0 Sonos/22.0-64240 (WDCR:Microsoft Windows NT 6.1.7601 Service Pack 1)
CONTENT-LENGTH: 1226
CONTENT-TYPE: text/xml; charset="utf-8"
SOAPACTION: "urn:schemas-upnp-org:service:AVTransport:1#AddURIToQueue"

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddURIToQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><EnqueuedURI>x-sonos-spotify:spotify%3atrack%3a7jwDuO7UZvWs77KNj9HbvF?sid=9&amp;flags=0</EnqueuedURI><EnqueuedURIMetaData>&lt;DIDL-Lite xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:upnp=&quot;urn:schemas-upnp-org:metadata-1-0/upnp/&quot; xmlns:r=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot; xmlns=&quot;urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/&quot;&gt;&lt;item id=&quot;00030000spotify%3atrack%3a7jwDuO7UZvWs77KNj9HbvF&quot; parentID=&quot;0004006cspotify%3aalbum%3a5jKMfS57mHTHzlSFGfPFxU&quot; restricted=&quot;true&quot;&gt;&lt;dc:title&gt;The Phoenix&lt;/dc:title&gt;&lt;upnp:class&gt;object.item.audioItem.musicTrack&lt;/upnp:class&gt;&lt;desc id=&quot;cdudn&quot; nameSpace=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot;&gt;SA_RINCON2311_antxxxx&lt;/desc&gt;&lt;/item&gt;&lt;/DIDL-Lite&gt;</EnqueuedURIMetaData><DesiredFirstTrackNumberEnqueued>0</DesiredFirstTrackNumberEnqueued><EnqueueAsNext>1</EnqueueAsNext></u:AddURIToQueue></s:Body></s:Envelope>

From this, the bits you need out of this are EnqueuedURI and EnqueuedURIMetaData. From the example above these are

<EnqueuedURI>x-sonos-spotify:spotify%3atrack%3a7jwDuO7UZvWs77KNj9HbvF?sid=9&amp;flags=0</EnqueuedURI>
<EnqueuedURIMetaData>&lt;DIDL-Lite xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:upnp=&quot;urn:schemas-upnp-org:metadata-1-0/upnp/&quot; xmlns:r=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot; xmlns=&quot;urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/&quot;&gt;&lt;item id=&quot;00030000spotify%3atrack%3a7jwDuO7UZvWs77KNj9HbvF&quot; parentID=&quot;0004006cspotify%3aalbum%3a5jKMfS57mHTHzlSFGfPFxU&quot; restricted=&quot;true&quot;&gt;&lt;dc:title&gt;The Phoenix&lt;/dc:title&gt;&lt;upnp:class&gt;object.item.audioItem.musicTrack&lt;/upnp:class&gt;&lt;desc id=&quot;cdudn&quot; nameSpace=&quot;urn:schemas-rinconnetworks-com:metadata-1-0/&quot;&gt;SA_RINCON2311_antxxxx&lt;/desc&gt;&lt;/item&gt;&lt;/DIDL-Lite&gt;</EnqueuedURIMetaData>

Paste the text from between the EnqueuedURI tags into the URI box and the text from between EnqueuedURIMetaData tags into the metadata box and select track and click update

sons.py
This is used to add a selection to the queue or start playing a radio station, or do some other sonos stuff

It takes a paramater action which can be either play, pause or enqueue and an optional selection paramater

examples
http://localhost:8000/sonos.py?action=enqueue&selection=A10
http://localhost:8000/sonos.py?action=play
http://localhost:8000/sonos.py?action=pause


play or pause just start or stop the sonos playing
If action = enqueue then there should be another paramater called selection which is the selection to start playing

If the selection is a stream, then it starts playing the stream immediatly
If the selection is a track, then if the sonos is stopped or playing a stream, then it starts playing the track immediatly.
If the selection is a track and the sonos is already playing tracks, then it just adds it to the end of the queue